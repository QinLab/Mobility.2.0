legend('bottomright',legend = c('across all','where >5,000 deaths'),bty='n',
lwd=2,col=c('blue3','red3'),seg.len = .5,cex=.7)
# binconf(x=sum(t2$Tc),n = sum(t2$noTC+t2$Tc),method = 'exact')
print('overall')
binconf(x=sum(AG$Tc),n = nrow(AG),method = 'exact')
# quantile(AG$TotalDeath,c(.5,.25,.75))
f <-  AG$TotalDeath>5e3
print('with more than 5e3')
binconf(x=sum(AG$Tc[f]),n = sum(f),method = 'exact')
t3 <-aggregate(AG$Rsq,by=list(AG$region2),quantile,c(.5,.025,.975))
t3 <- data.frame(t3[[1]],t3[[2]][,1],t3[[2]][,2],t3[[2]][,3])
names(t3) <- c('region','med','low','up')
f_tc <- which(AG$Tc)
f_d <- which(AG$Tc & AG$TotalDeath > 5e3) #quantile(AG$TotalDeath,c(.5)))
t3_tc <-aggregate(AG$Rsq[f_tc],by=list(AG$region2[f_tc]),quantile,c(.5,.025,.975))
t3_tc <- data.frame(t3_tc[[1]],t3_tc[[2]][,1],t3_tc[[2]][,2],t3_tc[[2]][,3])
names(t3_tc) <- c('region','med','low','up')
t3_d <-aggregate(AG$Rsq[f_d],by=list(AG$region2[f_d]),quantile,c(.5,.025,.975))
t3_d <- data.frame(t3_d[[1]],t3_d[[2]][,1],t3_d[[2]][,2],t3_d[[2]][,3])
names(t3_d) <- c('region','med','low','up')
errbar(x = 1:4,y = t3[,2],yplus = t3[,3],yminus = t3[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1))
errbar(x = 1:4+.2,y = t3_tc[,2],yplus = t3_tc[,3],yminus = t3_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.4,y = t3_d[,2],yplus = t3_d[,3],yminus = t3_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t3$region)
legend('bottomright',legend = c('all','with time change','and >5,000 deaths'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.7)
quantile(AG$Rsq,c(.5,.025,.975))
hist(AG$Rsq)
# only with TC
quantile(AG$Rsq[f_tc],c(.5,.025,.975))
hist(AG$Rsq[f_tc])
# with more deaths
quantile(AG$Rsq[f_d],c(.5,.025,.975))
hist(AG$Rsq[f_d])
t4 <-aggregate(AG$Rsq,by=list(AG$region2),quantile,c(.5,.025,.975))
t4 <- data.frame(t4[[1]],t4[[2]][,1],t4[[2]][,2],t4[[2]][,3])
names(t4) <- c('region','med','low','up')
t4_tc <-aggregate(AG$Rsq1,by=list(AG$region2),quantile,c(.5,.025,.975),na.rm=TRUE)
t4_tc <- data.frame(t4_tc[[1]],t4_tc[[2]][,1],t4_tc[[2]][,2],t4_tc[[2]][,3])
names(t4_tc) <- c('region','med','low','up')
t4_d <-aggregate(AG$Rsq2,by=list(AG$region2),quantile,c(.5,.025,.975),na.rm=TRUE)
t4_d <- data.frame(t4_d[[1]],t4_d[[2]][,1],t4_d[[2]][,2],t4_d[[2]][,3])
names(t4_d) <- c('region','med','low','up')
errbar(x = 1:4,y = t4[,2],yplus = t4[,3],yminus = t4[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1))
errbar(x = 1:4+.2,y = t4_tc[,2],yplus = t4_tc[,3],yminus = t4_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.4,y = t4_d[,2],yplus = t4_d[,3],yminus = t4_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t4$region)
legend('bottomright',legend = c('all','pre-dampening','post-dampening'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.7)
# quantile(AG$Rsq,c(.5,.025,.975))
# hist(AG$Rsq)
#
# # # only with TC
# #
# quantile(AG$Rsq[f_tc],c(.5,.025,.975))
# hist(AG$Rsq[f_tc])
#
# # with more deaths
#
# quantile(AG$Rsq[f_d],c(.5,.025,.975))
# hist(AG$Rsq[f_d])
layout(matrix(1:3,3,1))
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = sum_tc[,1],yplus = sum_tc[,2],yminus = sum_tc[,3],
xaxt='n',bty='n',ylab = 'p. with time change',col='blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4+.1,y = sum_tc_d[,1],yplus = sum_tc_d[,2],yminus = sum_tc_d[,3],
xaxt='n',bty='n',ylab = '',col='red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels =rep('',4),las=2)
legend('bottomright',legend = c('across all','where >5,000 deaths'),bty='n',
lwd=2,col=c('blue3','red3'),seg.len = .5,cex=.85)
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = t3[,2],yplus = t3[,3],yminus = t3[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4,y = t3_tc[,2],yplus = t3_tc[,3],yminus = t3_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.1,y = t3_d[,2],yplus = t3_d[,3],yminus = t3_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = rep('',4),las=2)
legend('bottomright',legend = c('all','with time change','and >5,000 deaths'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.85)
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = t4[,2],yplus = t4[,3],yminus = t4[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4,y = t4_tc[,2],yplus = t4_tc[,3],yminus = t4_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.1,y = t4_d[,2],yplus = t4_d[,3],yminus = t4_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t4$region)
legend('bottomright',legend = c('all','pre-dampening','post-dampening'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.85)
AG[,c('th1','th1low','th1up')] <-NA
AG[,c('th2','th2low','th2up')] <-NA
Mdata <- "AG"
res_m1 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
res_m1b <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/Rdata/output2_over_form_',Mdata,'.rds' ))[[si]]
res_m2 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_tD_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
res_m2b <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_tD_Over/Rdata/output2_over_form_',Mdata,'.rds' ))[[si]]
f <-rep(NA,3)
for(i in 1:nrow(AG)){
if(AG$Tc[i]){
## first one
if(diff(res_m2b$results_full_Rt_assumed_mob$median_R[,i+1])[1]<0){
Thresholds <- res_m2$Thresholds[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m2b$results_full_Rt_assumed_mob$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m2b$results_full_Rt_assumed_mob$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m2b$results_full_Rt_assumed_mob$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m2b$results_full_Rt_assumed_mob$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}
## second one
if(diff(res_m2b$results_full_Rt_assumed_mob2$median_R[,i+1])[1]<0){
Thresholds <- res_m2$Thresholds2[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th2','th2low','th2up')] <-Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m2b$results_full_Rt_assumed_mob2$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds< (-0.99))] <- NA
AG[i,c('th2','th2low','th2up')] <- Thresholds
}
}else{
if(diff(res_m1b$results_full_Rt_assumed_mob$median_R[,i+1])[1]<0){
Thresholds <- res_m1$Thresholds[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m1b$results_full_Rt_assumed_mob$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m1b$results_full_Rt_assumed_mob$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m1b$results_full_Rt_assumed_mob$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m1b$results_full_Rt_assumed_mob$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds< (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}
}
}
bound <- function(x){
if(is.numeric(x[1])){
if(is.na(x[2])) x[2] <- -2
if(is.na(x[3])) x[3] <- 2
}
if(is.na(x[1])){
if(is.numeric(x[2])){
x[c(1,3)] <- 2
}
if(is.numeric(x[3])){
x[c(1,2)] <- -2
}
}
return(x)
}
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(5,12,1,2))
plot(1e3,1e3,bty='n',ylab = '',yaxt='n',
xlab = 'Reduction in mobility (proportion)',xlim = c(-.2,1),ylim = c(2,53))
idx <- 1:nrow(AG) #order(AG$Rsq)
yl <- rep(NA,nrow(AG))
for (i in 1:length(idx)){
if(i %% 2 != 0){
abline(h = i,lty=2,lwd=.5)
}
if(AG$Tc[idx[i]]){
yl[i] = paste0(gsub('_',' ',AG$country[idx[i]]),' (',
round(AG$Rsq1[idx[i]],digits = 2),' ; ',
round(AG$Rsq2[idx[i]],digits = 2),')')
if(AG$beta1[i]==1){
x <- c(AG$th1[idx[i]], AG$th1low[idx[i]],AG$th1up[idx[i]] )
x <- bound(x)
lines( x[1], i+.1,type = 'p', pch=16,col = rgb(.4,.5,.1))
lines(x[2:3], c(i,i)+.1,lwd=2,col = rgb(.4,.5,.1))
}
if(AG$beta2[i]==1){
x <- c(AG$th2[idx[i]], AG$th2low[idx[i]],AG$th2up[idx[i]] )
x <- bound(x)
lines( x[1], i-.1,type = 'p', pch=16,col = rgb(.8,.3,0))
lines(x[2:3], c(i,i)-.1,lwd=2,col = rgb(.8,.3,0))
}
}else{
yl[i] = paste0(gsub('_',' ',AG$country[idx[i]]),' (',
round(AG$Rsq[idx[i]],digits = 2),')')
if(AG$beta1[i]==1){
x <- c(AG$th1[idx[i]] , AG$th1low[idx[i]],AG$th1up[idx[i]])
x <- bound(x)
lines( x[1], i,type = 'p', pch=16,col = rgb(.4,.5,.1))
lines(x[2:3], c(i,i),lwd=2,col = rgb(.4,.5,.1))
}
}
}
axis(side = 2,at = 1:length(idx),labels = yl,las=1)
100-tail(inputs$M_process$Combined$AG$United_Kingdom)
c(tail(res_m2b$results_full_Rt_daily$median_R$United_Kingdom,1),
tail(res_m2b$results_full_Rt_daily$low_R$United_Kingdom,1),
tail(res_m2b$results_full_Rt_daily$up_R$United_Kingdom,1))
c(tail(res_m2b$results_full_Rt_D2$median_R$United_Kingdom,1),
tail(res_m2b$results_full_Rt_D2$low_R$United_Kingdom,1),
tail(res_m2b$results_full_Rt_D2$up_R$United_Kingdom,1))
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(5,4,2,0),cex=1.2,cex.lab=1.2)
count1 <- table(AG$region2,AG$beta1,AG$Tc)
# count1
count2 <- table(AG$region2[AG$Tc],AG$beta2[AG$Tc])
# count2
# barplot(t(count1[,,1]), col = c('darkolivegreen','brown','grey'))
# barplot(t(count1[,,2]), col = c('darkolivegreen','brown','grey'))
# barplot(t(count2), col = c('darkolivegreen','brown','grey'))
barplot(t(count1[,,1]), col = c('darkolivegreen','brown','grey'),ylab = 'frequency',
width =1,space =3*c(0,1,1,1),xlim = c(0,17),ylim=c(0,21),xaxt='n')
barplot(t(count1[,,2]), col = c('darkolivegreen','brown','grey'),
width =1,space =3*c(1/3,1,1,1),add=TRUE,xaxt='n')
barplot(t(count2), col = c('darkolivegreen','brown','grey'),
width =1,space =3*c(2/3,1,1,1),add=TRUE,xaxt='n')
axis(side=1,at = c(1,2,3,5,6,7,9,10,11,13,14,15)-0.5,
labels = rep(c('No','1st','2nd'),4),padj = -.75,cex.axis =.7)
axis(side=1,at = c(2,6,10,14)-0.5,labels = rownames(count2),padj = 0.75)
legend('topright',legend = c('Rt decreases with mobility reduction',
'Rt increases with mobility reduction',
'no significant relationship'),
lwd = 4,col = c('darkolivegreen','brown','grey'),
seg.len = 0.5,cex=.9,bty = 'n')
#####
print('overall')
(sum(AG$beta1==1)+sum(AG$beta2==1,na.rm = TRUE))/(nrow(AG)+sum(AG$Tc==1))
(sum(AG$beta1==1 & AG$Tc==1))/(sum(AG$Tc==1))
(sum(AG$beta1==3)+sum(AG$beta2==3,na.rm = TRUE))/(nrow(AG)+sum(AG$Tc==1))
(sum(AG$beta1==2)+sum(AG$beta2==2,na.rm = TRUE))/(nrow(AG)+sum(AG$Tc==1))
# sum(AG$Tc==1)/nrow(AG)
quantile(c(AG$Rsq1[AG$Tc==0],AG$Rsq1,AG$Rsq2),c(.5,.25,.75),na.rm=TRUE)
quantile(c(AG$Rsq1[AG$Tc==1]),c(.5,.25,.75),na.rm=TRUE)
quantile(c(AG$Rsq2[AG$Tc==1]),c(.5,.25,.75),na.rm=TRUE)
quantile(c(AG$Rsq1[AG$Tc==1 & AG$TotalDeath>5e3]),c(.5,.25,.75),na.rm=TRUE)
# quantile(AG$Rsq[which(AG$TotalDeath>5e3)],c(.5,.025,.975))
# quantile(AG$Rsq1,c(.5,.025,.975),na.rm=TRUE)
# quantile(AG$Rsq2,c(.5,.025,.975),na.rm=TRUE)
# ### whrere we have dampening
# quantile(AG$Rsq1[which(AG$Tc==1)],c(.5,.025,.975),na.rm=TRUE)
# quantile(AG$Rsq2[which(AG$Tc==1)],c(.5,.025,.975),na.rm=TRUE)
#################
quantile(AG$Rsq1[which(AG$beta1==1)],c(.5,.25,.75))
sum(AG$beta1==1)/nrow(AG)
quantile(AG$Rsq1[which(AG$beta1==1)],c(.5,.25,.75))
quantile(AG$Rsq1[which(AG$beta1==1 & AG$TotalDeath>5e3)],c(.5,.25,.75))
##########################
sum(AG$beta2==1,na.rm=TRUE)/sum(!is.na(AG$beta2))
quantile(AG$Rsq2[which(AG$beta2==1)],c(.5,.25,.75))
quantile(AG$Rsq2[which(AG$beta2==1 & AG$TotalDeath>5e3)],c(.5,.25,.75))
View(AG)
mob_now <- data.frame(country = AG$country,
upper = NA,
current = NA,
above = NA)
aa <- inputs$M_process_mat
aa <- inputs$M_process_mat$AG
View(aa)
aa <- 100-inputs$M_process_mat$AG
aa <- round(100-inputs$M_process_mat$AG)
mob_now <- data.frame(country = AG$country,
upper = NA,
current = (100-inputs$M_process_mat$AG),
above = NA)
mob_now <- data.frame(country = AG$country,
upper = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
mob_now <- data.frame(country = AG$country,
upper = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc==1){
mob_now$upper[i] <- 100*AG$th2up[i]
}else{
mob_now$upper[i] <- 100*AG$th1up[i]
}
mob_now$above[i] <- mob_now$upper[i]>mob_now$current[i]
}
mob_now <- data.frame(country = AG$country,
upper = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
}else{
mob_now$upper[i] <- 100*AG$th1up[i]
}
mob_now$above[i] <- mob_now$upper[i]>mob_now$current[i]
}
View(mob_now)
mob_now <- data.frame(country = AG$country,
upper = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc[i]==1){
if(AG$beta2[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
}
}else{
if(AG$beta1[i]==1){
mob_now$upper[i] <- 100*AG$th1up[i]
}
}
mob_now$above[i] <- mob_now$upper[i]>mob_now$current[i]
}
mob_now <- data.frame(country = AG$country,
upper = NA,lower = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc[i]==1){
if(AG$beta2[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
mob_now$lower[i] <- 100*AG$th2low[i]
}
}else{
if(AG$beta1[i]==1){
mob_now$upper[i] <- 100*AG$th1up[i]
mob_now$lower[i] <- 100*AG$th1low[i]
}
}
mob_now$above[i] <- mob_now$upper[i]>mob_now$current[i]
}
mob_now <- data.frame(country = AG$country,
upper = NA,lower = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc[i]==1){
if(AG$beta2[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
mob_now$lower[i] <- 100*AG$th2low[i]
}
}else{
if(AG$beta1[i]==1){
mob_now$upper[i] <- 100*AG$th1up[i]
mob_now$lower[i] <- 100*AG$th1low[i]
}
}
if((mob_now$current[i] < mob_now$upper[i]) & (mob_now$current[i] > mob_now$upper[i])){
mob_now$above[i] <- 'uncertain'
}else if((mob_now$current[i] > mob_now$upper[i])){
mob_now$above[i] <- 'control'
}else{
mob_now$above[i] <- 'grow'
}
}
i
if(AG$Tc[i]==1){
if(AG$beta2[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
mob_now$lower[i] <- 100*AG$th2low[i]
}
}else{
if(AG$beta1[i]==1){
mob_now$upper[i] <- 100*AG$th1up[i]
mob_now$lower[i] <- 100*AG$th1low[i]
}
}
if((mob_now$current[i] < mob_now$upper[i]) & (mob_now$current[i] > mob_now$upper[i])){
mob_now$above[i] <- 'uncertain'
}else if((mob_now$current[i] > mob_now$upper[i])){
mob_now$above[i] <- 'control'
}else{
mob_now$above[i] <- 'grow'
}
(mob_now$current[i] < mob_now$upper[i]) & (mob_now$current[i] > mob_now$upper[i])
mob_now <- data.frame(country = AG$country,
upper = NA,lower = NA,
current = (100-inputs$M_process_mat$AG)[nrow(inputs$M_process_mat$AG),],
above = NA)
for(i in 1:nrow(AG)){
if(AG$Tc[i]==1){
if(AG$beta2[i]==1){
mob_now$upper[i] <- 100*AG$th2up[i]
mob_now$lower[i] <- 100*AG$th2low[i]
}
}else{
if(AG$beta1[i]==1){
mob_now$upper[i] <- 100*AG$th1up[i]
mob_now$lower[i] <- 100*AG$th1low[i]
}
}
# if((mob_now$current[i] < mob_now$upper[i]) & (mob_now$current[i] > mob_now$upper[i])){
#   mob_now$above[i] <- 'uncertain'
# }else if((mob_now$current[i] > mob_now$upper[i])){
#   mob_now$above[i] <- 'control'
# }else{
#   mob_now$above[i] <- 'grow'
# }
#
}
which(!is.na(mob_now$upper) |!is.na(mob_now$lower) )
mob_now[which(!is.na(mob_now$upper) |!is.na(mob_now$lower) ),]
mob_now2 <- mob_now[which(!is.na(mob_now$upper) |!is.na(mob_now$lower) ),]
View(mob_now2)
mob_now2 <- mob_now[which(!is.na(mob_now$upper) |!is.na(mob_now$lower) ),]
mob_now2$above <- 'uncertain'
mob_now2$above[which(mob_now2$current < mob_now2$lower)] <- 'control'
mob_now2$above[which(mob_now2$current > mob_now2$upper)] <- 'grow'
mob_now2 <- mob_now[which(!is.na(mob_now$upper) |!is.na(mob_now$lower) ),]
mob_now2$above <- 'uncertain'
mob_now2$above[which(mob_now2$current < mob_now2$lower)] <- 'grow'
mob_now2$above[which(mob_now2$current > mob_now2$upper)] <- 'control'
mob_now2$country[mob_now2$above == 'control']
mob_now2$country[mob_now2$above == 'grow']
mob_now2$country[mob_now2$above == 'uncertain']
getwd()
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/TableModels_comparision/figs/',
fig.keep='high',
dev=c('png'), fig.width=6, fig.height=6, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
inputs<- readRDS(file=
'../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/inputProcessing/Rdata/inputs.rds')
names(inputs)
data_stream <- names(inputs$M_process_mat )
DICs1 <- data.frame(country = names(inputs$D)[-1],matrix(NA,1,length(data_stream)))
names(DICs1)[-1] <- data_stream
DICs2 <- DICs1
names(DICs2)[-1] <- paste0(data_stream,'_tc')
si=2
for (Mdata in data_stream){
res_m1 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
res_m2 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_tD_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
country_infer <- (res_m1$country)
for (i in 1:length(country_infer)){
fc <- which(names(DICs1) %in% Mdata)
fr <- which(DICs1$country %in% country_infer[i])
DICs1[fr,fc] <- round(res_m1$resMCMC$DIC[i])
DICs2[fr,fc] <- round(res_m2$resMCMC$DIC[i])
}
}
DICs3 <- merge(x = DICs1,y = DICs2,by = 'country')
DICs4 <- DICs3[,1:6]
names(DICs4)[-1] <- c('best','value','best_Tc','value','diff')
for (i in 1:nrow(DICs4)){
f <- which(DICs1[i,2:ncol(DICs1)] %in% min(DICs1[i,2:ncol(DICs1)],na.rm=TRUE))
if(length(f)>1) f <- tail(f,1)
DICs4[i,2] <- names(DICs1)[f+1]
DICs4[i,3] <- min(DICs1[i,2:ncol(DICs1)],na.rm=TRUE)
f <- which(DICs2[i,2:ncol(DICs1)] %in% min(DICs2[i,2:ncol(DICs1)],na.rm=TRUE))
if(length(f)>1) f <- tail(f,1)
DICs4[i,4] <- names(DICs2)[f+1]
DICs4[i,5] <- min(DICs2[i,2:ncol(DICs2)],na.rm=TRUE)
}
DICs4[,6] <- DICs4[,3]-DICs4[,5]
write.csv(DICs1,file = 'DICs1.csv')
write.csv(DICs2,file = 'DICs2.csv')
write.csv(DICs3,file = 'DICs3.csv')
write.csv(DICs4,file = 'DICs4.csv')
aa <- res_m1$over
View(aa)
res_m1$over[,1]
res_m2$over[,1]
