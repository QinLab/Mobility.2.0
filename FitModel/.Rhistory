m2 <- summary(lm(y[f]~x[f]))
AG$Rsq2[i] <- m2$adj.r.squared
AG$beta1[i] <- 2*as.numeric(betas2_1[2,i]<0) + as.numeric(betas2_1[3,i]>0)
AG$beta2[i] <- 2*as.numeric(betas2_2[2,i]<0) + as.numeric(betas2_2[3,i]>0)
}else{
AG$beta1[i] <- 2*as.numeric(betas1[2,i]<0) + as.numeric(betas1[3,i]>0)
}
}
xt <-  as.vector(as.matrix(AGcorr[[1]][,-1]))
yt <- as.vector(as.matrix(AGcorr[[2]][,-1]))
plot(xt,yt)
m <- summary(lm(yt~xt))
m
t1 <- table(AG$region,AG$Tc)
t2 <- (table(AG$region2,AG$Tc))
t2 <- data.frame(rownames(t2),t2[,1],t2[,2])
names(t2) <- c('region','noTC','Tc')
AG$TotalDeath <- colSums(inputs$D[,2:(nrow(AG)+1)])
f_d <- which(AG$TotalDeath > 5e3)
t2_d <- (table(AG$region2[f_d],AG$Tc[f_d]))
t2_d <- data.frame(rownames(t2_d),t2_d[,1],t2_d[,2])
names(t2_d) <- c('region','noTC','Tc')
sum_tc <- binconf(x=t2$Tc,n = t2$noTC+t2$Tc,method = 'exact')
sum_tc_d <- binconf(x=t2_d$Tc,n = t2_d$noTC+t2_d$Tc,method = 'exact')
errbar(x = 1:4,y = sum_tc[,1],yplus = sum_tc[,2],yminus = sum_tc[,3],
xaxt='n',bty='n',ylab = 'proportion with time change',col='blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1))
errbar(x = 1:4+.3,y = sum_tc_d[,1],yplus = sum_tc_d[,2],yminus = sum_tc_d[,3],
xaxt='n',bty='n',ylab = '',col='red3',errbar.col = 'red3',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t2$region)
legend('bottomright',legend = c('across all','where >5,000 deaths'),bty='n',
lwd=2,col=c('blue3','red3'),seg.len = .5,cex=.7)
# binconf(x=sum(t2$Tc),n = sum(t2$noTC+t2$Tc),method = 'exact')
print('overall')
binconf(x=sum(AG$Tc),n = nrow(AG),method = 'exact')
# quantile(AG$TotalDeath,c(.5,.25,.75))
f <-  AG$TotalDeath>5e3
print('with more than 5e3')
binconf(x=sum(AG$Tc[f]),n = sum(f),method = 'exact')
t3 <-aggregate(AG$Rsq,by=list(AG$region2),quantile,c(.5,.025,.975))
t3 <- data.frame(t3[[1]],t3[[2]][,1],t3[[2]][,2],t3[[2]][,3])
names(t3) <- c('region','med','low','up')
f_tc <- which(AG$Tc)
f_d <- which(AG$Tc & AG$TotalDeath > 5e3) #quantile(AG$TotalDeath,c(.5)))
t3_tc <-aggregate(AG$Rsq[f_tc],by=list(AG$region2[f_tc]),quantile,c(.5,.025,.975))
t3_tc <- data.frame(t3_tc[[1]],t3_tc[[2]][,1],t3_tc[[2]][,2],t3_tc[[2]][,3])
names(t3_tc) <- c('region','med','low','up')
t3_d <-aggregate(AG$Rsq[f_d],by=list(AG$region2[f_d]),quantile,c(.5,.025,.975))
t3_d <- data.frame(t3_d[[1]],t3_d[[2]][,1],t3_d[[2]][,2],t3_d[[2]][,3])
names(t3_d) <- c('region','med','low','up')
errbar(x = 1:4,y = t3[,2],yplus = t3[,3],yminus = t3[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1))
errbar(x = 1:4+.2,y = t3_tc[,2],yplus = t3_tc[,3],yminus = t3_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.4,y = t3_d[,2],yplus = t3_d[,3],yminus = t3_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t3$region)
legend('bottomright',legend = c('all','with time change','and >5,000 deaths'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.7)
quantile(AG$Rsq,c(.5,.025,.975))
hist(AG$Rsq)
# only with TC
quantile(AG$Rsq[f_tc],c(.5,.025,.975))
hist(AG$Rsq[f_tc])
# with more deaths
quantile(AG$Rsq[f_d],c(.5,.025,.975))
hist(AG$Rsq[f_d])
t4 <-aggregate(AG$Rsq,by=list(AG$region2),quantile,c(.5,.025,.975))
t4 <- data.frame(t4[[1]],t4[[2]][,1],t4[[2]][,2],t4[[2]][,3])
names(t4) <- c('region','med','low','up')
t4_tc <-aggregate(AG$Rsq1,by=list(AG$region2),quantile,c(.5,.025,.975),na.rm=TRUE)
t4_tc <- data.frame(t4_tc[[1]],t4_tc[[2]][,1],t4_tc[[2]][,2],t4_tc[[2]][,3])
names(t4_tc) <- c('region','med','low','up')
t4_d <-aggregate(AG$Rsq2,by=list(AG$region2),quantile,c(.5,.025,.975),na.rm=TRUE)
t4_d <- data.frame(t4_d[[1]],t4_d[[2]][,1],t4_d[[2]][,2],t4_d[[2]][,3])
names(t4_d) <- c('region','med','low','up')
errbar(x = 1:4,y = t4[,2],yplus = t4[,3],yminus = t4[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,4.5),ylim = c(0,1))
errbar(x = 1:4+.2,y = t4_tc[,2],yplus = t4_tc[,3],yminus = t4_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.4,y = t4_d[,2],yplus = t4_d[,3],yminus = t4_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',xlim = c(0.5,4.5),ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t4$region)
legend('bottomright',legend = c('all','pre-dampening','post-dampening'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.7)
# quantile(AG$Rsq,c(.5,.025,.975))
# hist(AG$Rsq)
#
# # # only with TC
# #
# quantile(AG$Rsq[f_tc],c(.5,.025,.975))
# hist(AG$Rsq[f_tc])
#
# # with more deaths
#
# quantile(AG$Rsq[f_d],c(.5,.025,.975))
# hist(AG$Rsq[f_d])
layout(matrix(1:3,3,1))
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = sum_tc[,1],yplus = sum_tc[,2],yminus = sum_tc[,3],
xaxt='n',bty='n',ylab = 'p. with time change',col='blue3',errbar.col = 'blue3',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4+.1,y = sum_tc_d[,1],yplus = sum_tc_d[,2],yminus = sum_tc_d[,3],
xaxt='n',bty='n',ylab = '',col='red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels =rep('',4),las=2)
legend('bottomright',legend = c('across all','where >5,000 deaths'),bty='n',
lwd=2,col=c('blue3','red3'),seg.len = .5,cex=.85)
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = t3[,2],yplus = t3[,3],yminus = t3[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4,y = t3_tc[,2],yplus = t3_tc[,3],yminus = t3_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.1,y = t3_d[,2],yplus = t3_d[,3],yminus = t3_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = rep('',4),las=2)
legend('bottomright',legend = c('all','with time change','and >5,000 deaths'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.85)
##################################
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(2,4,0,2))
errbar(x = 1:4-.1,y = t4[,2],yplus = t4[,3],yminus = t4[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',
xlab = '',xlim = c(0.8,5),ylim = c(0,1))
errbar(x = 1:4,y = t4_tc[,2],yplus = t4_tc[,3],yminus = t4_tc[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'blue3',errbar.col = 'blue3',
xlab = '',ylim = c(0,1),add=TRUE)
errbar(x = 1:4+.1,y = t4_d[,2],yplus = t4_d[,3],yminus = t4_d[,4],
xaxt='n',bty='n',ylab = 'R-square (adj.)',col = 'red3',errbar.col = 'red3',
xlab = '',ylim = c(0,1),add=TRUE)
axis(side = 1,at = 1:4,labels = t4$region)
legend('bottomright',legend = c('all','pre-dampening','post-dampening'),bty='n',
lwd=2,col=c('black','blue3','red3'),seg.len = .5,cex=.85)
AG[,c('th1','th1low','th1up')] <-NA
AG[,c('th2','th2low','th2up')] <-NA
Mdata <- "AG"
res_m1 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
res_m1b <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/Rdata/output2_over_form_',Mdata,'.rds' ))[[si]]
res_m2 <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_tD_Over/Rdata/output_over_form_',Mdata,'.rds' ))[[si]]
res_m2b <-  readRDS( file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_tD_Over/Rdata/output2_over_form_',Mdata,'.rds' ))[[si]]
f <-rep(NA,3)
for(i in 1:nrow(AG)){
if(AG$Tc[i]){
## first one
if(diff(res_m2b$results_full_Rt_assumed_mob$median_R[,i+1])[1]<0){
Thresholds <- res_m2$Thresholds[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m2b$results_full_Rt_assumed_mob$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m2b$results_full_Rt_assumed_mob$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m2b$results_full_Rt_assumed_mob$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m2b$results_full_Rt_assumed_mob$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}
## second one
if(diff(res_m2b$results_full_Rt_assumed_mob2$median_R[,i+1])[1]<0){
Thresholds <- res_m2$Thresholds2[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th2','th2low','th2up')] <-Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m2b$results_full_Rt_assumed_mob2$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m2b$results_full_Rt_assumed_mob2$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds< (-0.99))] <- NA
AG[i,c('th2','th2low','th2up')] <- Thresholds
}
}else{
if(diff(res_m1b$results_full_Rt_assumed_mob$median_R[,i+1])[1]<0){
Thresholds <- res_m1$Thresholds[,i]
Thresholds[which(Thresholds < (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}else{
Thresholds <- rep(NA,3)
f[1] <- rev(which(res_m1b$results_full_Rt_assumed_mob$median_R[,i+1] < 1))[1]
f[2] <- rev(which(res_m1b$results_full_Rt_assumed_mob$low_R[,i+1] < 1))[1]
f[3] <- rev(which(res_m1b$results_full_Rt_assumed_mob$up_R[,i+1] < 1))[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j] <- NA
}else{
Thresholds[j] <- mean(res_m1b$results_full_Rt_assumed_mob$median_R$mobility[f[j]:(f[j]+1)])
}
}
Thresholds[which(Thresholds< (-0.99))] <- NA
AG[i,c('th1','th1low','th1up')] <- Thresholds
}
}
}
bound <- function(x){
if(is.numeric(x[1])){
if(is.na(x[2])) x[2] <- -2
if(is.na(x[3])) x[3] <- 2
}
if(is.na(x[1])){
if(is.numeric(x[2])){
x[c(1,3)] <- 2
}
if(is.numeric(x[3])){
x[c(1,2)] <- -2
}
}
return(x)
}
# par(mar = c(bottom, left, top, right)), default  c(5.1, 4.1, 4.1, 2.1).
par(mar = c(5,12,1,2))
plot(1e3,1e3,bty='n',ylab = '',yaxt='n',
xlab = 'Reduction in mobility (proportion)',xlim = c(-.2,1),ylim = c(2,53))
idx <- 1:nrow(AG) #order(AG$Rsq)
yl <- rep(NA,nrow(AG))
for (i in 1:length(idx)){
if(i %% 2 != 0){
abline(h = i,lty=2,lwd=.5)
}
if(AG$Tc[idx[i]]){
yl[i] = paste0(gsub('_',' ',AG$country[idx[i]]),' (',
round(AG$Rsq1[idx[i]],digits = 2),' ; ',
round(AG$Rsq2[idx[i]],digits = 2),')')
if(AG$beta1[i]==1){
x <- c(AG$th1[idx[i]], AG$th1low[idx[i]],AG$th1up[idx[i]] )
x <- bound(x)
lines( x[1], i+.1,type = 'p', pch=16,col = rgb(.4,.5,.1))
lines(x[2:3], c(i,i)+.1,lwd=2,col = rgb(.4,.5,.1))
}
if(AG$beta2[i]==1){
x <- c(AG$th2[idx[i]], AG$th2low[idx[i]],AG$th2up[idx[i]] )
x <- bound(x)
lines( x[1], i-.1,type = 'p', pch=16,col = rgb(.8,.3,0))
lines(x[2:3], c(i,i)-.1,lwd=2,col = rgb(.8,.3,0))
}
}else{
yl[i] = paste0(gsub('_',' ',AG$country[idx[i]]),' (',
round(AG$Rsq[idx[i]],digits = 2),')')
if(AG$beta1[i]==1){
x <- c(AG$th1[idx[i]] , AG$th1low[idx[i]],AG$th1up[idx[i]])
x <- bound(x)
lines( x[1], i,type = 'p', pch=16,col = rgb(.4,.5,.1))
lines(x[2:3], c(i,i),lwd=2,col = rgb(.4,.5,.1))
}
}
}
axis(side = 2,at = 1:length(idx),labels = yl,las=1)
View(AG)
sum(AG$beta1==1)/nrow(AG)
sum(AG$Tc==1)/nrow(AG)
quantile(AG$Rsq,c(.5,.025,.975))
quantile(AG$Rsq[which(AG$TotalDeath>5e3)],c(.5,.025,.975))
quantile(AG$Rsq1[which(AG$beta1==1)],c(.5,.025,.975))
quantile(AG$Rsq1,c(.5,.025,.975))
quantile(AG$Rsq1,c(.5,.025,.975),na.rm=TRUE)
quantile(AG$Rsq2,c(.5,.025,.975),na.rm=TRUE)
quantile(AG$Rsq1[which(AG$Tc==1)],c(.5,.025,.975),na.rm=TRUE)
quantile(AG$Rsq2[which(AG$Tc==1)],c(.5,.025,.975),na.rm=TRUE)
latest_deaths_wide_no_filter <- readRDS("C:/Users/pn211/Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/inputs/latest_deaths_wide_no_filter.rds")
latest_deaths_wide_no_filter$dates
data_stream
View(AG)
View(DICs1)
sum(!is.na(DICs1$Apple_c))
sum(!is.na(DICs1$Google_c))
sum(is.na(DICs1$Apple_c))
data_stream
setwd('../FitModel')
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
# opts_chunk$set(fig.path='../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/figs/', fig.keep='high',
#                dev=c('png'), fig.width=6, fig.height=6, cache=FALSE,
#                tidy=FALSE, warning=FALSE, fig.show="asis"
# )
# rep_sim <- 1e3
output <- list()
output2 <- list()
inputs<- readRDS(file=
'../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/inputProcessing/Rdata/inputs.rds')
names(inputs)
data_stream <- names(inputs$M_process_mat )
for (Mdata in data_stream){
# Mdata = data_stream[1]
# for (si in 2){
si=1
rep <- 1e3#1e5
########################################
####inputs
D0 <- inputs$D
Mold <- inputs$M_process_mat[[Mdata]]
f_country_with_Mdata <- which(colSums(!is.na(Mold))>0)
D <- inputs$D[,c(1,1+f_country_with_Mdata)]
M1 <- inputs$M_process_mat[[Mdata]][,f_country_with_Mdata]
M <- M1/100
M[is.na(M)] <- 1
Ot <- inputs$Ot[[si]]$Ot[,f_country_with_Mdata]
W <- inputs$W[[si]]$W
H <- inputs$H
SI <- inputs$SI[[si]]$SI
delta_id <- inputs$delta_id
#
country <- names(D)[-1]
mD <- as.matrix(D[,-1])
N_geo <- ncol(D)-1
N_days <- nrow(D)
N_week <- nrow(D)/7
# prerp MCMC
# epi
R0 <- 5
# for risk
b <- 0
o <- 1
theta0 <- c(rep(R0,N_geo),
rep(b,N_geo),
rep(o,N_geo))
prior_theta <- matrix(c(rep(c(0,5),N_geo),
rep(c(-1e2,1e2),N_geo),
rep(c(0,1e5),N_geo)),
length(theta0),2, byrow=TRUE)
# parameter names
f0 <- function(x) paste0('R0_',x)
f1 <- function(x) paste0('beta_',x)
f2 <- function(x) paste0('Over_',x)
n_t<- c(sapply(country,f0), sapply(country,f1), sapply(country,f2))
# sd dev for proposal
sigma <- rep(1e-1,length(theta0))
########################################
# useful functions
# useful functions
sapply(paste0('Rscript/std/',(list.files('Rscript/std/'))),FUN = source)
########################################
#run MCMC
#check
# res <- MCMC_iter(iter = rep, theta0 = theta0, s = sigma)
res <- MCMC_full(iter = rep,
theta0 = theta0,
s = sigma,
repli_adapt = 10,
within_iter = rep/100)
########################################
## check convergence
print('########################################')
print(paste0('check convergence - ',Mdata,' - ',si))
Acc <- colSums(diff(res$theta)!=0)/(rep-1)
# thining
if(rep >1e3){
f <- round(seq(1,rep,length.out = 1e3))
res$theta <- res$theta[f,]
res$logL <- res$logL[f,]
}
rep <- nrow(res$theta)
# check results
plot(res$logL[,1],main=paste0('DIC ',res$DIC[1],', P ',res$DIC[2]))
layout(matrix(1:4,2,2))
for (i in 1:length(theta0)){
plot(res$theta[,i],
main = paste0(n_t[i],' - ',round(Acc[i]*100)))#,       ylim = prior_theta[i,])
}
# apply(res$theta,2,quantile,c(.5,.025,.975))
# ncountry <- country
# ncountry[which(ncountry %in% 'United_Kingdom')] <- 'UK'
# ncountry[which(ncountry %in% 'United_States_of_America')] <- 'USA'
#
R0s <- apply(res$theta[,1:N_geo],2,quantile,c(.5,.025,.975))
betas <- apply(res$theta[,N_geo+(1:N_geo)],2,quantile,c(.5,.025,.975))
over <- apply(res$theta[,2*N_geo+(1:N_geo)],2,quantile,c(.5,.025,.975))
## margin for side 2 is 7 lines in siz
layout(1)
# par(mar = c(7,4,4,2) + 0.1) ## default is c(5,4,4,2) + 0.1
errbar(1:N_geo,R0s[1,],R0s[2,],R0s[3,],
xlab = '', ylab = TeX('R_0'), bty = 'n',xaxt = "n",ylim=c(0,10))
# xlab = '', ylab = 'R',ylim = c(0,3), bty = 'n',xaxt = "n")
lines(c(1,N_geo),rep(1,2), col = 'red')
axis(1, at=1:N_geo, labels=country,las=2)
####
errbar(1:N_geo,betas[1,],betas[2,],betas[3,],
xlab = '', ylab = TeX('$\\beta$'), bty = 'n',xaxt = "n")
# xlab = '', ylab = 'R',ylim = c(0,3), bty = 'n',xaxt = "n")
# lines(c(1,N_geo),rep(1,2), col = 'red')
axis(1, at=1:N_geo, labels=country,las=2)
output[[si]] <- list(resMCMC = res,
R0s = R0s,
betas = betas,
over = over,
country = country)
####################################
## Rt daily and Rt_D2
### observed mobility
res_m <- output[[si]]
rep <- nrow(res_m$resMCMC$theta)
Rt_daily <- array(NA,dim = c(N_days,N_geo,rep))
Rt_D2 <- Rt_daily
m_eff <- Rt_daily
f_m_eff <- function(){
1 + 1/B * log( H %*% exp( - B * (1-M) ) )
}
for (j in 1:rep){
R_daily <- Rt_fun(theta = res_m$resMCMC$theta[j,], x = M )
Rt_daily[,,j] <- R_daily
Rt_D2[,,j] <- H %*% R_daily
B <- rep(1,nrow(M)) %*% t(res_m$resMCMC$theta[j,(2-1)*N_geo+ (1:N_geo)])
m_eff[,,j] <- f_m_eff() # 1 + 1/B * log( inputs$H %*% exp( - B * (1-inputs$M) ) )
}
###################################
### assumed mobility
n_d <- 1e3
Rt_assumed_mob <- array(NA,dim = c(n_d,N_geo,rep))
x <-  matrix(seq(-1,1,length.out = n_d),n_d,N_geo,byrow = FALSE)
for (j in 1:rep){
R_daily <- Rt_fun(theta = res_m$resMCMC$theta[j,], x = 1-x )
Rt_assumed_mob[,,j] <- R_daily
}
#####################################
## summaries
### Summary for Rt daily and Rt_D2
# format outputs
temp <- D
temp[,-1] <- NA
results_full_Rt_daily <- list(median_R = temp,
low_R = temp,
up_R = temp,
M = temp)
results_full_Rt_D2 <- list(median_R = temp,
low_R = temp,
up_R = temp,
M_D = temp)
results_meff <- list(median_meff = temp,
low_meff = temp,
up_meff = temp)
for (i in 1:N_geo){
temp <- apply(Rt_daily[,i,],1,quantile,c(.5,.025,.975),na.rm = TRUE)
results_full_Rt_daily$median_R[,i+1] <- temp[1,]
results_full_Rt_daily$low_R[,i+1] <- temp[2,]
results_full_Rt_daily$up_R[,i+1] <- temp[3,]
results_full_Rt_daily$M[,i+1] <- M[,i]
temp <- apply(Rt_D2[,i,],1,quantile,c(.5,.025,.975),na.rm = TRUE)
results_full_Rt_D2$median_R[,i+1] <- temp[1,]
results_full_Rt_D2$low_R[,i+1] <- temp[2,]
results_full_Rt_D2$up_R[,i+1] <- temp[3,]
# results_full_Rt_D2$M_D[,i+1] <- M_D[,i]
temp <- apply(m_eff[,i,],1,quantile,c(.5,.025,.975),na.rm = TRUE)
results_meff$median_meff[,i+1] <- temp[1,]
results_meff$low_meff[,i+1] <- temp[2,]
results_meff$up_meff[,i+1] <- temp[3,]
}
#############################################
### Summary for Rt assumed mobility
# format outputs
temp <- data.frame(matrix(NA,nrow = n_d, ncol = 1+N_geo))
temp[,1] <- x[,1]
names(temp) <- c('mobility', country)
results_full_Rt_assumed_mob <- list(median_R = temp,
low_R = temp,
up_R = temp)
Thresholds <- output[[si]]$R0s
f <- c()
for (i in 1:N_geo){
temp <- apply(Rt_assumed_mob[,i,],1,quantile,c(.5,.025,.975),na.rm = TRUE)
results_full_Rt_assumed_mob$median_R[,i+1] <- temp[1,]
results_full_Rt_assumed_mob$low_R[,i+1] <- temp[2,]
results_full_Rt_assumed_mob$up_R[,i+1] <- temp[3,]
f[1] <- which(results_full_Rt_assumed_mob$median_R[,i+1] < 1)[1]
f[2] <- which(results_full_Rt_assumed_mob$low_R[,i+1] < 1)[1]
f[3] <- which(results_full_Rt_assumed_mob$up_R[,i+1] < 1)[1]
for(j in 1:3){
if (is.na(f[j])){
Thresholds[j,i] <- NA
}else{
Thresholds[j,i] <- mean(results_full_Rt_assumed_mob$median_R$mobility[f[j]:(f[j]+1)])
}
}
}
output[[si]]$Thresholds <- Thresholds
output2[[si]] <- list(results_full_Rt_daily = results_full_Rt_daily,
results_full_Rt_D2 = results_full_Rt_D2,
results_meff = results_meff,
results_full_Rt_assumed_mob = results_full_Rt_assumed_mob)
# }
saveRDS(object = output,
file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/si1/output_over_form_',Mdata,'.rds' ))
saveRDS(object = output2,
file = paste0('../../../../Dropbox (SPH Imperial College)/Mobility.2.0.Save/Saved_file/FitModels/R0_beta_Over/si1/output2_over_form_',Mdata,'.rds' ))
}
